<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peter Tellgren]]></title>
  <link href="http://petertellgren.github.io/atom.xml" rel="self"/>
  <link href="http://petertellgren.github.io/"/>
  <updated>2013-10-18T14:05:24+03:00</updated>
  <id>http://petertellgren.github.io/</id>
  <author>
    <name><![CDATA[Peter Tellgren]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lanugage switching with dynamicly generated i18n urls]]></title>
    <link href="http://petertellgren.github.io/blog/2013/10/17/lanugage-switching-with-dynamicly-generated-i18n-urls/"/>
    <updated>2013-10-17T22:49:00+03:00</updated>
    <id>http://petertellgren.github.io/blog/2013/10/17/lanugage-switching-with-dynamicly-generated-i18n-urls</id>
    <content type="html"><![CDATA[<p>A while back I ran in to a problem of a client who decided they needed translated routes for SEO resasons. In general this is not too big of a problem and there are great gems available to help you.</p>

<p>For instance I used <a href="https://github.com/raul/translate_routes">translate_routes</a> which will help to translate the &ldquo;model&rdquo; part of your routes. e.g:</p>

<ul>
<li>English: <em>/books</em></li>
<li>French: <em>/livres</em></li>
</ul>


<p>However, in my case some URLs are not defined up front but are instead generated by parameterizing some part/parts of the related resource content. Sticking with the books example &ldquo;Crime and Punishment&rdquo; by Fyodor Dostoyevsky could for instance get the URLs:</p>

<ul>
<li>English: <em>/books/crime-and-punishment</em>.</li>
<li>French: <em>/livres/crime-et-chatiment</em>.</li>
</ul>


<p>To acchive this I used the <a href="https://github.com/norman/friendly_id/tree/4.0-stable">Friendly Id 4.0</a> gem that provides integration with <a href="https://github.com/globalize/globalize">Globalize 3</a> gem that allows for the &ldquo;slug&rdquo; for a resouce to be translated and persisted per locale. So while this solves the translation of resource paths, it does not tackle the language switcher that should switch language but display the same content. Allbeit in different language.</p>

<p>So how can one solve this problem in Ruby on Rails.</p>

<h2>Option 1: Adding resource id as initial part of url.</h2>

<p>Ryan Bates showed this technique off in <a href="http://railscasts.com/episodes/63-model-name-in-url">Railscast #63</a>. This would work out as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#model</span>
</span><span class='line'><span class="k">def</span> <span class="nf">to_param</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">localized_permalink</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#/books/340-crime-and-punishment</span>
</span><span class='line'><span class="c1">#/livres/340-crime-et-chatiment</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#controller</span>
</span><span class='line'><span class="vi">@book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#This would allow for simple switcher links</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Fr&quot;</span><span class="p">,</span> <span class="p">{</span><span class="ss">locale</span><span class="p">:</span> <span class="s1">&#39;fr&#39;</span><span class="p">}</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="c1"># assuming we&#39;re on :en locale this would generate:</span>
</span><span class='line'><span class="c1"># /livres/340-crime-and-punishment</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will work but not that you will have multiple URLs to same content which I&rsquo;ve been told is apparently not the best idea from an SEO standpoint. Please don&rsquo;t quote me on this though. Regardless this was not allowed in the project I was working on.</p>

<h2>Option 2: Translation logic on request.</h2>

<p>I&rsquo;ve actually not tried this out but you could theoretically do the translation lookup on the request by using the non translated id and other resource_id params. This carries with it the same potential concern as option 1.</p>

<h2>Option 3: Pre-generated translated routes</h2>

<p>This is the solution I needed to meet my clients specific demands. What I did here was to add a concern to the models with content specific URLs. The purpouse was to provide my views with a hash for the current resource that contained all translated routes to it. Also note that I had to solve the problem also for nested resources.</p>

<p>some code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TranslatedRoutes</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">translated_routes</span><span class="p">(</span><span class="n">parent</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">paths</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="no">I18n</span><span class="o">.</span><span class="n">available_locales</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">locale</span><span class="o">|</span>
</span><span class='line'>      <span class="n">paths</span><span class="o">[</span><span class="n">locale</span><span class="o">]</span> <span class="o">=</span> <span class="n">translated_path_for</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">paths</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># { :locale =&gt; :en,</span>
</span><span class='line'>  <span class="c1">#   :parent_id =&gt; parent.id, :id =&gt; child.id</span>
</span><span class='line'>  <span class="c1"># }</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">translated_path_for</span><span class="p">(</span><span class="n">locale</span><span class="p">,</span> <span class="n">parent</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:locale</span> <span class="o">=&gt;</span> <span class="n">locale</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">slug_for</span><span class="p">(</span><span class="n">locale</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">path</span><span class="o">.</span><span class="n">merge!</span><span class="p">({</span><span class="n">parent</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">foreign_key</span> <span class="o">=&gt;</span> <span class="n">parent</span><span class="o">.</span><span class="n">slug_for</span><span class="p">(</span><span class="n">locale</span><span class="p">)})</span> <span class="k">unless</span> <span class="n">parent</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># { :en=&gt;&quot;crime-and-punishment&quot;,</span>
</span><span class='line'>  <span class="c1">#   :fr=&gt;&quot;crime-et-chatiment&quot; }</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">slugs</span>
</span><span class='line'>    <span class="no">Hash</span><span class="o">[</span> <span class="o">*</span><span class="n">translations</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="o">[</span><span class="n">t</span><span class="o">.</span><span class="n">locale</span><span class="p">,</span><span class="n">t</span><span class="o">.</span><span class="n">slug</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># path_for(:en) =&gt; &quot;crime-and-punishment&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">slug_for</span><span class="p">(</span><span class="n">locale</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">localized_slug</span> <span class="o">=</span> <span class="n">slugs</span><span class="o">[</span><span class="n">locale</span><span class="o">]</span>
</span><span class='line'>      <span class="n">localized_slug</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">slug</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">#model</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TranslatedRoutes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#controller</span>
</span><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">find</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@localized_routes</span> <span class="o">=</span> <span class="vi">@book</span><span class="o">.</span><span class="n">translated_routes</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#helper</span>
</span><span class='line'><span class="k">def</span> <span class="nf">localized_path</span><span class="p">(</span><span class="n">locale</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@localized_routes</span>
</span><span class='line'>    <span class="vi">@localized_routes</span><span class="o">[</span><span class="n">locale</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:locale</span> <span class="o">=&gt;</span> <span class="n">locale</span><span class="o">.</span><span class="n">to_s</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#switcher</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= link_to &quot;English&quot;, localized_path(:en) %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;French&quot;</span><span class="p">,</span> <span class="n">localized_path</span><span class="p">(</span><span class="ss">:fr</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not sure this is the optimal solution for this kind of requirements, however it does seem to work well. If you know of better solutions or optimizations to this please let me know in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Dynamic View Paths to ActionMailer in Rails 2.3.11]]></title>
    <link href="http://petertellgren.github.io/blog/2011/10/13/adding-dynamic-view-paths-to-actionmailer-in-rails-2-dot-3-11/"/>
    <updated>2011-10-13T10:05:00+03:00</updated>
    <id>http://petertellgren.github.io/blog/2011/10/13/adding-dynamic-view-paths-to-actionmailer-in-rails-2-dot-3-11</id>
    <content type="html"><![CDATA[<p>When I recently rewrote our app at work into a multi tenant app I ran in to the problem of the action_mailer views. Since the app started out it’s life as a single tenant app most of the mails had to be changed but also had to remain the same for the app still there</p>

<p>My first idea was to just configure the template_root of ActionMailer in my new Environment but just after this was done the requirement came that each tenant might want to customize these views. so instead of changing the template_root depending on the tenant I googled around and found a solution for adding the nice view_path method we already have for the ActionController.</p>

<p>The original post can be found <a href="http://www.quirkey.com/blog/2008/08/28/actionmailer-hacking-multiple-template-paths/">here</a> but I thought I would show my implementation below. Basically a compilation of the original poster and the comments given to that post</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActionMailer</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="n">class_inheritable_accessor</span> <span class="ss">:view_paths</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prepend_view_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">view_paths</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">append_view_path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">view_paths</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">view_paths</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">view_paths</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">view_paths</span>
</span><span class='line'>      <span class="vc">@@view_paths</span> <span class="o">||=</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">view_paths</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize_template_class_without_helpers</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">ActionView</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">view_paths</span><span class="p">,</span> <span class="n">assigns</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I made sure that my lib directory was included in my load paths and then I could mange the view paths as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">prepend_view_path</span><span class="p">(</span><span class="no">RAILS_ROOT</span> <span class="o">+</span> <span class="s1">&#39;/app/views/...&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouble With ImageMagick on a VPS]]></title>
    <link href="http://petertellgren.github.io/blog/2011/03/24/trouble-with-imagemagick-on-a-vps/"/>
    <updated>2011-03-24T17:45:00+02:00</updated>
    <id>http://petertellgren.github.io/blog/2011/03/24/trouble-with-imagemagick-on-a-vps</id>
    <content type="html"><![CDATA[<p>This week I was adding a galleries to a rails site that I am working on and for some reason on my production server, each time I tried to upload an image it failed and I got returned a 502 response from my server. The thing was that even though I was looking at my logs I saw no request even being made to the server. I finally got an image to upload and could see in my logs that the action took in excess of one minute to complete which led my Rails worker (unicorn) to time out and return the aforementioned 502 error response. As I went through the call stack I could determine that the bottleneck was ImageMagick and especially the calls to the convert method.</p>

<p>I did some testing and could confirm what I had determined in the logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time utilities/convert 'image.jpg' -resize "x60" -crop "60x60" +repage 'thumb'
</span><span class='line'>real    0m11.602s
</span><span class='line'>user    0m11.414s
</span><span class='line'>sys     0m0.069s</span></code></pre></td></tr></table></div></figure>


<p><strong>11 seconds to scale and crop an image, that’s just insanly slow!!!</strong></p>

<p>I did some googleing and found rumors that openmp, that is activated by default in ImageMagick and helps to make use of modern CPUs multi core architecture sometimes could cause issues in a virtualized environment wich is exactly what I am running on.</p>

<p>So I went out and got the latest version of the ImageMagick source, compiled it with the —disable-openmp flag and redid the test with this binary:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time utilities/convert 'image.jpg' -resize "x60" -crop "60x60" +repage 'thumb'
</span><span class='line'>real    0m0.077s
</span><span class='line'>user    0m0.058s
</span><span class='line'>sys     0m0.019s</span></code></pre></td></tr></table></div></figure>


<p>That’s more like it, don’t you agree. All I know had to do was to install this version on to my server. However as I am running Ubuntu 10.04 so I’d like to keep with the package system. For some reason I was not able to get the 10.04 package of ImageMagick to accept the —disable-openmp flag so, in the end I backported the package from Ubuntu 10.10 instead. please find the steps below:</p>

<h3>1. Download the following files:</h3>

<ul>
<li><a href="http://archive.ubuntu.com/ubuntu/pool/main/i/imagemagick/imagemagick_6.6.2.6-1ubuntu1.1.dsc">imagemagick_6.6.2.6-1ubuntu1.1.dsc</a></li>
<li><a href="http://archive.ubuntu.com/ubuntu/pool/main/i/imagemagick/imagemagick_6.6.2.6.orig.tar.bz2">imagemagick_6.6.2.6.orig.tar.bz2</a></li>
<li><a href="http://archive.ubuntu.com/ubuntu/pool/main/i/imagemagick/imagemagick_6.6.2.6-1ubuntu1.1.debian.tar.bz2">imagemagick_6.6.2.6-1ubuntu1.1.debian.tar.bz2</a></li>
</ul>


<h3>2. Unpack</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dpkg-source -x imagemagick_6.6.2.6-1ubuntu1.1.dsc</span></code></pre></td></tr></table></div></figure>


<h3>3. Edit the build rules</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd imagemagick-6.6.2.6
</span><span class='line'>$ vim debian/rules</span></code></pre></td></tr></table></div></figure>


<p>Add the the following line to the ./configure statement on line 25-39. I added mine on line 34.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>34: —disable-openmp \</span></code></pre></td></tr></table></div></figure>


<h3>4. Add dependencies and build ( I needed these dependencies)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install liblqr-1-0-dev librsvg2-dev
</span><span class='line'>$ dpkg-buildpackage -b</span></code></pre></td></tr></table></div></figure>


<h3>5. Out with the old, in with the new</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get remove —purge imagemagick
</span><span class='line'>$ sudo dpkg -i libmagickcore3_6.6.2.6-1ubuntu1.1_amd64.deb
</span><span class='line'>$ sudo dpkg -i libmagickwand3_6.6.2.6-1ubuntu1.1_amd64.deb
</span><span class='line'>$ sudo dpkg -i imagemagick_6.6.2.6-1ubuntu1.1_amd64.deb</span></code></pre></td></tr></table></div></figure>


<p>So there we are, my gallery is now up and running and preforming as should.</p>
]]></content>
  </entry>
  
</feed>
